---
import { siteConfig } from "../config";
const hasExperience = siteConfig.experience && siteConfig.experience.length > 0;
---

{hasExperience && (
  <section id="experience" class="p-8 sm:p-12 md:p-16 lg:p-24">
    <div class="grid grid-cols-1 lg:grid-cols-12 gap-8 lg:gap-16 items-start">
      <!-- Left column -->
      <div class="lg:col-span-4">
        <h2 class="text-3xl sm:text-4xl md:text-5xl xl:text-7xl font-bold text-gray-900">
          Experience
        </h2>
        <div
          class="w-[75px] h-[5px] mt-2 rounded-full"
          style={`background-color: ${siteConfig.accentColor}`}
        />
      </div>

      <!-- Right column -->
      <div class="lg:col-span-8">
        <div class="relative">
          {siteConfig.experience.map((exp, index) => (
            <div
              class="relative mb-12 last:mb-0"
              data-experience-index={index}
              data-expanded={exp.expanded ? "true" : "false"}
              data-animated="false"
            >
              <!-- Timeline dot -->
              <div
                class="absolute left-1/2 -top-2 w-4 h-4 bg-white border-2 rounded-full -translate-x-1/2 z-20 transition-all duration-300"
                style={`border-color: ${siteConfig.accentColor}; background-color: ${siteConfig.accentColor}`}
              />

              <!-- Connecting line -->
              {index < siteConfig.experience.length - 1 && (
                <div class="absolute left-1/2 bottom-0 w-0.5 h-12 bg-gray-300 -translate-x-1/2 translate-y-full z-10" />
              )}

              <!-- Card -->
              <article class="bg-white rounded-lg shadow-sm border border-gray-100 hover:shadow-md transition-shadow duration-300">
                <!-- Toggle button -->
                <button
                  type="button"
                  id={`exp-toggle-${index}`}
                  data-toggle
                  aria-expanded={exp.expanded ? "true" : "false"}
                  aria-controls={`exp-content-${index}`}
                  class="w-full text-left p-4 sm:p-5 md:p-6 flex flex-col sm:flex-row sm:items-center sm:justify-between"
                >   
                  <!-- Left group -->
                  <div class="flex items-start space-x-3">
                    <span class="chevron self-center transition-transform duration-300">
                      <svg xmlns="http://www.w3.org/2000/svg" class="w-4 h-4" fill="none"
                        viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M19 9l-7 7-7-7" />
                      </svg>
                    </span>
                    <div>
                        <h3 class="text-lg sm:text-xl font-semibold text-gray-900">
                        {exp.title}
                        </h3>
                        <p
                        class="text-base sm:text-lg"
                        style={`color: ${siteConfig.accentColor}`}
                        >
                        {exp.company}
                        </p>
                    </div>

                  </div>


                  <span class="text-xs sm:text-sm text-gray-500 mt-2 sm:mt-0 pl-7 sm:pl-0">
                    {exp.dateRange}
                  </span>
                </button>

                <!-- Collapsible content -->
                <div
                  id={`exp-content-${index}`}
                  data-content
                  role="region"
                  aria-labelledby={`exp-toggle-${index}`}
                  aria-hidden={exp.expanded ? "false" : "true"}
                  style={exp.expanded ? "max-height: none;" : "max-height: 0px;"}
                  class="overflow-hidden transition-all duration-300 ease-in-out px-4 sm:px-5 md:px-6 pb-4"
                >
                  <ul class="space-y-2">
                    {exp.bullets.map((bullet) => (
                      <li class="flex items-start">
                        <span class="inline-block w-1.5 h-1.5 rounded-full bg-gray-400 mt-2 mr-3 flex-shrink-0" />
                        <span class="text-sm sm:text-base text-gray-600">
                          {bullet}
                        </span>
                      </li>
                    ))}
                  </ul>
                </div>
              </article>
            </div>
          ))}
        </div>
      </div>
    </div>
  </section>
)}


<script type="module" defer>
(function () {
  function setExpandedState(wrapper, expanded) {
    const btn = wrapper.querySelector('[data-toggle]');
    const content = wrapper.querySelector('[data-content]');
    wrapper.setAttribute('data-expanded', expanded ? 'true' : 'false');
    btn.setAttribute('aria-expanded', expanded ? 'true' : 'false');
    content.setAttribute('aria-hidden', expanded ? 'false' : 'true');
  }

  function openContent(content, wrapper) {
    content.style.maxHeight = content.scrollHeight + 'px';
    const onEnd = () => {
      if (wrapper.getAttribute('data-expanded') === 'true') {
        content.style.maxHeight = 'none';
      }
      content.removeEventListener('transitionend', onEnd);
    };
    content.addEventListener('transitionend', onEnd);
  }

  function closeContent(content) {
    content.style.maxHeight = content.scrollHeight + 'px';
    content.getBoundingClientRect(); // force reflow
    content.style.maxHeight = '0px';
  }

  function toggle(wrapper) {
    const content = wrapper.querySelector('[data-content]');
    const isOpen = wrapper.getAttribute('data-expanded') === 'true';
    if (isOpen) {
      closeContent(content);
      setExpandedState(wrapper, false);
    } else {
      setExpandedState(wrapper, true);
      openContent(content, wrapper);
    }
  }

  function init() {
    document.querySelectorAll('[data-experience-index]').forEach((wrapper) => {
      const btn = wrapper.querySelector('[data-toggle]');
      const content = wrapper.querySelector('[data-content]');

      // Enable animations after load
      wrapper.setAttribute('data-animated', 'true');

      // Initial height setup
      if (wrapper.getAttribute('data-expanded') === 'true') {
        content.style.maxHeight = content.scrollHeight + 'px';
        requestAnimationFrame(() => {
          content.style.maxHeight = 'none';
        });
      } else {
        content.style.maxHeight = '0px';
      }

      // Toggle on click
      btn.addEventListener('click', () => toggle(wrapper));

      // Handle images loading inside content
      content.querySelectorAll('img').forEach(img => {
        if (!img.complete) {
          img.addEventListener('load', () => {
            if (wrapper.getAttribute('data-expanded') === 'true') {
              content.style.maxHeight = content.scrollHeight + 'px';
              requestAnimationFrame(() => {
                content.style.maxHeight = 'none';
              });
            }
          });
        }
      });

      // Optional: resize adjustment
      window.addEventListener('resize', () => {
        if (wrapper.getAttribute('data-expanded') === 'true') {
          content.style.maxHeight = content.scrollHeight + 'px';
          requestAnimationFrame(() => {
            content.style.maxHeight = 'none';
          });
        }
      });
    });
  }

  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
})();
</script>